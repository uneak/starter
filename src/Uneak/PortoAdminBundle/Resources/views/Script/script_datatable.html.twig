<script type="text/javascript">


    $.fn.dataTableExt.oApi.fnLengthChange = function(oSettings, iDisplay)
    {
        oSettings._iDisplayLength = iDisplay;
        oSettings.oApi._fnCalculateEnd(oSettings);
        /* If we have space to show extra rows (backing up from the end point - then do so */
        if (oSettings._iDisplayEnd == oSettings.aiDisplay.length)
        {
            oSettings._iDisplayStart = oSettings._iDisplayEnd - oSettings._iDisplayLength;
            if (oSettings._iDisplayStart < 0)
            {
                oSettings._iDisplayStart = 0;
            }
        }

        if (oSettings._iDisplayLength == -1)
        {
            oSettings._iDisplayStart = 0;
        }

        oSettings.oApi._fnDraw(oSettings);
        if (oSettings.aanFeatures.l)
        {
            $('select', oSettings.aanFeatures.l).val(iDisplay);
        }
    };






    $(document).ready(function () {


        var grid = $('#{{ uniqid }}').dataTable({
            "iDisplayLength": {{ display_length }},
            "stateSave": {{ state_save ? 'true':'false' }},
            "processing": {{ processing ? 'true':'false' }},
            "serverSide": {{ server_side ? 'true':'false' }},
            "ajax": "{{ ajax }}",
            "columns": [{% for column in columns %}{{ column | json_encode() | raw }}, {% endfor %}
                {"name": "", "data": "_actions", "sortable": false, "searchable": false}
            ],
            "language": {
                "sProcessing": "Traitement en cours...",
                "sSearch": "Rechercher&nbsp;:",
                "sLengthMenu": "Afficher _MENU_ &eacute;l&eacute;ments",
                "sInfo": "Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments",
                "sInfoEmpty": "Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments",
                "sInfoFiltered": "(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)",
                "sInfoPostFix": "",
                "sLoadingRecords": "Chargement en cours...",
                "sZeroRecords": "Aucun &eacute;l&eacute;ment &agrave; afficher",
                "sEmptyTable": "Aucune donn&eacute;e disponible dans le tableau",
                "oPaginate": {
                    "sFirst": "Premier",
                    "sPrevious": "Pr&eacute;c&eacute;dent",
                    "sNext": "Suivant",
                    "sLast": "Dernier"
                },
                "oAria": {
                    "sSortAscending": ": activer pour trier la colonne par ordre croissant",
                    "sSortDescending": ": activer pour trier la colonne par ordre d&eacute;croissant"
                }
            }

        });

        gridApi = grid.api();


        $('{{ search_input }}').keyup(function() {
            gridApi.search($(this).val()).draw();
        });
//
//        $('.grid-col-search').keyup(function() {
//            gridApi.column($(this).data('column')).search($(this).val()).draw();
//        });
//
        $('.table-row-number').on("click", function(e) {
            e.preventDefault();
            grid.fnLengthChange($(this).data('value'));
        });
//
//        $('a.grid-col-vis').on('click', function(e) {
//            e.preventDefault();
//            var column = gridApi.column($(this).data('column'));
//            column.visible(!column.visible());
//
//        });




        $(".dataTables_filter").hide();
//        $(".dataTables_info").hide();
        $(".dataTables_length").hide();



//        $('.dataTables_filter input').addClass("form-control"); // modify table search input
//        $('.dataTables_length select').addClass("form-control"); // modify table per page dropdown



    });

</script>