<?php

namespace Uneak\PortoAdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\QueryBuilder;

/**
 * APIRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class APIRepository extends EntityRepository implements APIQueryInterface {

    public function getAll(array $criteria = array()) {
        $qb = $this->getCriteriaQuery($criteria);
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getCriteriaQuery(array $criteria = array()) {
        $qb = $this->createQueryBuilder('o');
        $this->addFilters($qb, $criteria, 'o');
        $this->addSelect($qb, $criteria, 'o');
        $this->addLimits($qb, $criteria, 'o');
        $this->addOrder($qb, $criteria, 'o');
        return $qb;
    }

    public function getCount(array $criteria = array()) {
        $qb = $this->createQueryBuilder('o');

        if ($criteria) {
            $this->addFilters($qb, $criteria, 'o');
        }
        $qb->select('COUNT(o)');
        return $qb->getQuery()->getSingleScalarResult();
    }



    public function addSelect(QueryBuilder &$qb, array $criteria = array(), $alias = "o") {

        if (isset($criteria['fields']) && $criteria['fields']) {
            $select = array();
            $fields = explode(',', $criteria['fields']);
            foreach ($fields as $field) {
                $select[] = $alias . '.' . $field;
            }

            $qb->select(join(',', $select));
        }

    }


    public function addLimits(QueryBuilder &$qb, array $criteria = array()) {

        if (isset($criteria['offset']) && $criteria['offset']) {
            $qb->setFirstResult($criteria['offset']);
        }

        if (isset($criteria['limit']) && $criteria['limit']) {
            $qb->setMaxResults($criteria['limit']);
        }

    }


    public function addOrder(QueryBuilder &$qb, array $criteria = array(), $alias = "o")
    {
        if (isset($criteria['sort']) && $criteria['sort']) {
            $fields = explode(',', $criteria['sort']);
            foreach ($fields as $field) {
                preg_match("/(-|\\+)(.*)/", $field, $fieldSort);
                $qb->addOrderBy($alias . '.' . $fieldSort[2], ($fieldSort[1] == "+") ? "ASC" : "DESC");
            }
        }
    }


    public function addFilters(QueryBuilder &$qb, array $criteria = array(), $alias = "o") {


        $colFilters = new Expr\Andx();

        if (isset($criteria['like'])) {
            foreach ($criteria['like'] as $col => $val) {
                $filterLabel = $col . '_filter_like_';
                $colFilters->add($qb->expr()->like($alias . '.' . $col, ':' . $filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['eq'])) {
            foreach ($criteria['eq'] as $col => $val) {
                $filterLabel = $col . '_filter_eq_';
                $colFilters->add($qb->expr()->eq($alias . '.' . $col, ':' . $filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['ne'])) {
            foreach ($criteria['ne'] as $col => $val) {
                $filterLabel = $col . '_filter_ne_';
                $colFilters->add($qb->expr()->neq($alias . '.' . $col, ':' . $filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['lt'])) {
            foreach ($criteria['lt'] as $col => $val) {
                $filterLabel = $col . '_filter_lt_';
                $colFilters->add($qb->expr()->lt($alias . '.' . $col, ':' . $filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['gt'])) {
            foreach ($criteria['gt'] as $col => $val) {
                $filterLabel = $col . '_filter_gt_';
                $colFilters->add($qb->expr()->gt($alias . '.' . $col, ':' . $filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['le'])) {
            foreach ($criteria['le'] as $col => $val) {
                $filterLabel = $col.'_filter_le_';
                $colFilters->add($qb->expr()->lte($alias . '.'.$col, ':'.$filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if (isset($criteria['ge'])) {
            foreach ($criteria['ge'] as $col => $val) {
                $filterLabel = $col.'_filter_ge_';
                $colFilters->add($qb->expr()->gte($alias . '.'.$col, ':'.$filterLabel));
                $qb->setParameter($filterLabel, $val);
            }
        }

        if ($colFilters->count()) {
            $qb->andWhere($colFilters);
        }

    }

}
