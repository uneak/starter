<?php

	namespace UserBundle\Entity;

	use Doctrine\ORM\EntityRepository;
	use Doctrine\ORM\Query\Expr;
	use Doctrine\ORM\QueryBuilder;
    use Uneak\PortoAdminBundle\Entity\APIRepository;

    /**
	 * UserRepository
	 *
	 * This class was generated by the Doctrine ORM. Add your own custom
	 * repository methods below.
	 */
	class UserRepository extends APIRepository {

		public function findOAuthUser($service, $id) {
			$qb = $this->getOAuthUserQuery($service, $id);
			$query = $qb->getQuery();
			return $query->getOneOrNullResult();
		}

		public function getOAuthUserQuery($service, $id) {
			$qb = $this->_em->createQueryBuilder();
			$qb->select(array('user'))
				->from('UserBundle:User', 'user')
				->innerJoin('user.oAuthUsers', 'oauth_users')
				->where($qb->expr()->andX(
					$qb->expr()->eq('oauth_users.id', ':id'),
					$qb->expr()->eq('oauth_users.service', ':service')
				))
				->setParameter('id', $id)
				->setParameter('service', $service)
			;
			return $qb;
		}



		public function findPendingAccount() {
			$qb = $this->getPendingAccountQuery();
			$query = $qb->getQuery();
			return $query->getResult();
		}

		public function getPendingAccountQuery() {
			$qb = $this->_em->createQueryBuilder();
			$qb->select(array('user'))
				->from('UserBundle:User', 'user')
				->where($qb->expr()->andX(
					$qb->expr()->eq('user.stateProfile', ':state'),
					$qb->expr()->eq('user.emailConfirmed', true)
				))
				->setParameter('state', User::STATE_PROFILE_PENDING)
				->orderBy("user.createdAt", "ASC")
			;
			return $qb;
		}

	}
